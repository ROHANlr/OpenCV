(a)Weapon Detection using Yolo:
import cv2
import torch
model = torch.hub.load('ultralytics/yolov5', 'yolov5s')
class_names = ["weapon", "person"]
cap = cv2.VideoCapture(0)
# Detection loop while True:
ret, frame = cap.read() if not ret:
break
img_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
results = model(img_rgb)
class_id = result.tolist()
x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)
class_id = int(class_id)
cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
label = f"{class_names[class_id]}: {confidence:.2f}" cv2.putText(frame, label, (x1, y1 - 10),
cv2.imshow("Weapon Detection", frame)
cv2.waitKey(1) & 0xFF == ord('q'):
break
cap.release()
cv2.destroyAllWindows()
(b)Setup and importing packages:
import os
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf from tensorflow.keras.preprocessing.image
import ImageDataGenerator from tensorflow.keras.applications
import MobileNetV2 from tensorflow.keras.layers
import Dense, GlobalAveragePooling2D, Dropout from tensorflow.keras.models
import Model from sklearn.metrics
import classification_report, confusion_matrix
(c)Code for Data preprocessing:
IMAGE_SIZE = (224, 224)
BATCH_SIZE = 32
train_datagen = ImageDataGenerator(rescale=1./255, rotation_range=20, zoom_range=0.15,
width_shift_range=0.2, height_shift_range=0.2, shear_range=0.15, horizontal_flip=True,
fill_mode="nearest")
val_test_datagen = ImageDataGenerator(rescale=1./255) train_generator =
train_datagen.flow_from_directory( 'dataset/train', target_size=IMAGE_SIZE,
batch_size=BATCH_SIZE, class_mode='binary' )
val_generator = val_test_datagen.flow_from_directory( 'dataset/val',
target_size=IMAGE_SIZE, batch_size=BATCH_SIZE, class_mode='binary' )
test_generator = val_test_datagen.flow_from_directory( 'dataset/test',
target_size=IMAGE_SIZE, batch_size=BATCH_SIZE, class_mode='binary', shuffle=False )
(d)Code for build the model:
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224,
3))
base_model.trainable = False # Freeze
base x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dropout(0.5)(x)
predictions = Dense(1, activation='sigmoid')(x)
model = Model(inputs=base_model.input, outputs=predictions)
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
(e)Train the model:
history = model.fit( train_generator, validation_data=val_generator, epochs=10 )
(f)Evaluating the model:
loss, accuracy = model.evaluate(test_generator)
print(f'Test accuracy: {accuracy:.2f}')
y_pred = model.predict(test_generator)
y_pred_classes = (y_pred > 0.5).astype("int32").flatten()
y_true = test_generator.classes
print("Classification Report:")
print(classification_report(y_true, y_pred_classes, target_names=['Non-Weapon', 'Weapon']))
print("Confusion Matrix:")
print(confusion_matrix(y_true, y_pred_classes))
(g)To save the model:
model.save('weapon_detection_model.h5')
